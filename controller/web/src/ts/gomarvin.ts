/**
 * @file API client generated by gomarvin, DO NOT EDIT!
 *
 * Rename the current file if you want to 
 * edit it and save changes.
 *
 * Repo             : https://github.com/tompston/gomarvin
 * Docs             : https://gomarvin.pages.dev/docs
 * Editor           : https://gomarvin.pages.dev
 * project_name     : "go-http",
 * config_version   : "0.1"
 * gomarvin_version : "v0.10.x"
 * 
 */

/** The API client used by the fetch function */
export interface Client {
  host_url: string
  api_prefix: string
  headers: HeadersInit
}

/** Interface for the expected response */
export interface ApiResponse {
  data : any,
  message : string
  status : number
  links? : {
    next? : string
    prev? : string
  }
}


/** Default api params */
export const defaultClient : Client = {
  host_url: "http://localhost:3000",
  api_prefix: "/api/v1",
  headers: {
    "Content-type": "application/json;charset=UTF-8",
  },
}


/**
 * optional interface used in the fetch request with optional parameters
 * @param {RequestInit} [options]
 * If default fetch options need to be edited, provide a custom options object
 * @param {string} [append_url]
 * extend the url with custom params (like "?name=jim")
 * @example
 * // Append an optional url string
 * async function FetchUserById() {
 *  const res = await gomarvin.GetUserById(client, 10, { append_url: "?name=jim" });
 *  console.log(res);
 * }
 * // Use a different RequestInit object in the fetch request
 * async function FetchUserById() {
 *  const res = await gomarvin.GetUserById(client, 10, { options: { method: "POST" } });
 *  console.log(res);
 * }
 */
export interface OptionalParams {
  options?: RequestInit;
  append_url?: string;
}


/** Endpoints for the Cron module */
export const CronEndpoints = {
  GetCrons,
  GetCron,
  CreateCron,
  DeleteCron,
  UpdateCron,
}
    
/** Endpoints for the Exec module */
export const ExecEndpoints = {
  Exec,
}
    
/**
 * ### Body for the CreateCron endpoint
 * @interface CreateCronBody
 *
 * @field taskname `required`
 * @field at `required`
 */
export interface CreateCronBody  {
  taskname: string 
  at: string 
}

/**
 * ### Body for the UpdateCron endpoint
 * @interface UpdateCronBody
 *
 * @field taskname `required`
 * @field at `required`
 */
export interface UpdateCronBody  {
  taskname: string 
  at: string 
}

/**
 * ### Body for the Exec endpoint
 * @interface ExecBody
 *
 * @field taskname `required`
 */
export interface ExecBody  {
  taskname: string 
}


/**
 * ### GET URL/cron
 * Fetch GetCrons endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function GetCrons(client : Client, opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/cron${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### GET URL/cron/[id:int]
 * Fetch GetCron endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {number} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function GetCron(client : Client,id: number,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/cron/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "GET",
    headers: client.headers,
    });
}

/**
 * ### POST URL/cron
 * Fetch CreateCron endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {CreateCronBody} body see CreateCronBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function CreateCron(client : Client,body: CreateCronBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/cron${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}

/**
 * ### DELETE URL/cron/[id:string]
 * Fetch DeleteCron endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {string} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function DeleteCron(client : Client,id: string,  opt?: OptionalParams): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/cron/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "DELETE",
    headers: client.headers,
    });
}

/**
 * ### PUT URL/cron/[id:int]
 * Fetch UpdateCron endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {UpdateCronBody} body see UpdateCronBody interface for validation fields
 * @param {number} id url param for the endpoint 

 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function UpdateCron(client : Client,id: number, body: UpdateCronBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/cron/${id}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "PUT",
    headers: client.headers,
    body: JSON.stringify(body)});
}
    

/**
 * ### POST URL/exec
 * Fetch Exec endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 * @param {ExecBody} body see ExecBody interface for validation fields
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of Response
 */
export async function Exec(client : Client,body: ExecBody, opt?: OptionalParams ): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}/exec${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "POST",
    headers: client.headers,
    body: JSON.stringify(body)});
}
    
